name: Build and Release (Disabled)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            ext: .exe
            python-version: '3.11'
          - os: ubuntu-latest
            platform: linux
            ext: ''
            python-version: '3.11'
          - os: macos-latest
            platform: macos
            ext: ''
            python-version: '3.11'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nuitka ordered-set

    - name: Install C++ compiler (Windows)
      if: matrix.platform == 'windows'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Install C++ compiler (Linux)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ ccache

    - name: Install C++ compiler (macOS)
      if: matrix.platform == 'macos'
      run: |
        xcode-select --install || true

    - name: Build executables with Nuitka (Windows)
      if: matrix.platform == 'windows'
      run: |
        mkdir dist
        python -m nuitka --standalone --onefile --enable-plugin=tk-inter --assume-yes-for-downloads --mingw64 --windows-console-mode=disable --output-dir=dist --output-filename="ChessGame-windows.exe" main.py
        python -m nuitka --standalone --onefile --enable-plugin=tk-inter --assume-yes-for-downloads --mingw64 --windows-console-mode=disable --output-dir=dist --output-filename="ChessGame-SinglePlayer-windows.exe" chess_game.py  
        python -m nuitka --standalone --onefile --enable-plugin=tk-inter --assume-yes-for-downloads --mingw64 --windows-console-mode=disable --output-dir=dist --output-filename="ChessGame-Multiplayer-windows.exe" chess_multiplayer.py
      shell: cmd

    - name: Build executables with Nuitka (Linux)
      if: matrix.platform == 'linux'
      run: |
        mkdir -p dist
        python -m nuitka --standalone --onefile --enable-plugin=tk-inter --assume-yes-for-downloads --output-dir=dist --output-filename="ChessGame-linux" main.py
        python -m nuitka --standalone --onefile --enable-plugin=tk-inter --assume-yes-for-downloads --output-dir=dist --output-filename="ChessGame-SinglePlayer-linux" chess_game.py
        python -m nuitka --standalone --onefile --enable-plugin=tk-inter --assume-yes-for-downloads --output-dir=dist --output-filename="ChessGame-Multiplayer-linux" chess_multiplayer.py
      shell: bash

    - name: Build executables with Nuitka (macOS)
      if: matrix.platform == 'macos'
      run: |
        mkdir -p dist
        python -m nuitka --standalone --onefile --enable-plugin=tk-inter --assume-yes-for-downloads --output-dir=dist --output-filename="ChessGame-macos" main.py
        python -m nuitka --standalone --onefile --enable-plugin=tk-inter --assume-yes-for-downloads --output-dir=dist --output-filename="ChessGame-SinglePlayer-macos" chess_game.py
        python -m nuitka --standalone --onefile --enable-plugin=tk-inter --assume-yes-for-downloads --output-dir=dist --output-filename="ChessGame-Multiplayer-macos" chess_multiplayer.py
      shell: bash

    - name: Create portable package (Windows)
      if: matrix.platform == 'windows'
      run: |
        mkdir ChessGame-Windows-Portable
        copy dist\*.exe ChessGame-Windows-Portable\
        copy README.md ChessGame-Windows-Portable\
        copy LICENSE ChessGame-Windows-Portable\ 2>nul || echo "No LICENSE file"
        echo "# Professional Chess Game - Windows Portable" > ChessGame-Windows-Portable\README-Portable.txt
        echo "" >> ChessGame-Windows-Portable\README-Portable.txt
        echo "Double-click ChessGame-windows.exe to start the game selector." >> ChessGame-Windows-Portable\README-Portable.txt
        echo "" >> ChessGame-Windows-Portable\README-Portable.txt
        echo "Or run individual games:" >> ChessGame-Windows-Portable\README-Portable.txt
        echo "- ChessGame-SinglePlayer-windows.exe (vs AI)" >> ChessGame-Windows-Portable\README-Portable.txt
        echo "- ChessGame-Multiplayer-windows.exe (two players)" >> ChessGame-Windows-Portable\README-Portable.txt
        
    - name: Create portable package (Linux)
      if: matrix.platform == 'linux'
      run: |
        mkdir ChessGame-Linux-Portable
        cp dist/* ChessGame-Linux-Portable/
        cp README.md ChessGame-Linux-Portable/
        cp LICENSE ChessGame-Linux-Portable/ 2>/dev/null || echo "No LICENSE file"
        chmod +x ChessGame-Linux-Portable/*
        echo "# Professional Chess Game - Linux Portable" > ChessGame-Linux-Portable/README-Portable.txt
        echo "" >> ChessGame-Linux-Portable/README-Portable.txt
        echo "Run ./ChessGame-linux to start the game selector." >> ChessGame-Linux-Portable/README-Portable.txt
        echo "" >> ChessGame-Linux-Portable/README-Portable.txt
        echo "Or run individual games:" >> ChessGame-Linux-Portable/README-Portable.txt
        echo "- ./ChessGame-SinglePlayer-linux (vs AI)" >> ChessGame-Linux-Portable/README-Portable.txt
        echo "- ./ChessGame-Multiplayer-linux (two players)" >> ChessGame-Linux-Portable/README-Portable.txt

    - name: Create portable package (macOS)
      if: matrix.platform == 'macos'
      run: |
        mkdir ChessGame-macOS-Portable
        cp dist/* ChessGame-macOS-Portable/
        cp README.md ChessGame-macOS-Portable/
        cp LICENSE ChessGame-macOS-Portable/ 2>/dev/null || echo "No LICENSE file"
        chmod +x ChessGame-macOS-Portable/*
        echo "# Professional Chess Game - macOS Portable" > ChessGame-macOS-Portable/README-Portable.txt
        echo "" >> ChessGame-macOS-Portable/README-Portable.txt
        echo "Run ./ChessGame-macos to start the game selector." >> ChessGame-macOS-Portable/README-Portable.txt
        echo "" >> ChessGame-macOS-Portable/README-Portable.txt
        echo "Or run individual games:" >> ChessGame-macOS-Portable/README-Portable.txt
        echo "- ./ChessGame-SinglePlayer-macos (vs AI)" >> ChessGame-macOS-Portable/README-Portable.txt
        echo "- ./ChessGame-Multiplayer-macos (two players)" >> ChessGame-macOS-Portable/README-Portable.txt

    - name: Get version for filename
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Create ZIP archive (Windows)
      if: matrix.platform == 'windows'
      run: |
        powershell Compress-Archive -Path ChessGame-Windows-Portable\* -DestinationPath ChessGame-Windows-${{ steps.get_version.outputs.version }}.zip

    - name: Create ZIP archive (Linux/macOS)
      if: matrix.platform != 'windows'
      run: |
        zip -r ChessGame-${{ matrix.platform }}-${{ steps.get_version.outputs.version }}.zip ChessGame-${{ matrix.platform }}-Portable/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: chess-game-${{ matrix.platform }}
        path: |
          ChessGame-*-${{ steps.get_version.outputs.version }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: List downloaded files
      run: |
        find . -name "*.zip" -type f
        ls -la
    
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: Professional Chess Game ${{ steps.get_version.outputs.version }}
        body: |
          ## ðŸŽ¯ Professional Chess Game Release ${{ steps.get_version.outputs.version }}
          
          ### ðŸŽ® What's New
          - High-performance chess implementation with modern GUI
          - Two game modes: Single Player vs AI and Two Player local multiplayer
          - Complete chess rules including castling, en passant, and pawn promotion
          - Beautiful dark theme interface with visual move indicators
          - Professional code architecture using functional programming
          
          ### ðŸ“¦ Downloads
          Choose your platform:
          
          - **Windows**: Download `ChessGame-Windows-*.zip`
          - **Linux**: Download `ChessGame-Linux-*.zip` 
          - **macOS**: Download `ChessGame-macOS-*.zip`
          
          ### ðŸš€ Quick Start
          1. Download the appropriate package for your operating system
          2. Extract the ZIP file
          3. Run the main executable to open the game mode selector
          
          ### ðŸŽ¯ Game Modes
          - **ðŸ¤– Single Player**: Challenge the AI opponent
          - **ðŸ‘¥ Two Player**: Play with a friend locally
          
          ### ðŸ”§ System Requirements
          - No additional software required - fully portable!
          - Works on Windows 10+, Linux (most distributions), macOS 10.14+
          
          ### ðŸ“– Full Documentation
          See the included README.md for complete instructions and features.
          
          ---
          
          Enjoy this beautiful implementation of the classic game of Chess! â™”â™•â™–â™—â™˜â™™
        files: |
          **/*.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}